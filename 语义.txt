|表示连接两个符号对应的两段指令链表，连接结果无需返回，因为其自动成为第一个符号的指令链表。
维护一vector<Inst> insts作为指令表。维护一标号表。

符号表内容：标识符名称/结构体名称/常数值name | 符号类型type | 偏移offset | 详细信息指针attr
符号表中包括标识符（包括基本类型、数组型、结构体型、结构体定义、语句块、匿名标识符）、常数（两种数值类型）。
结构体定义时offset值记录其长度，详细信息指针指向其独立符号表。
语句块（包括选择、循环及其它匿名花括号语句块）不命名（name=NULL），type=IDENTIFIER，datatype=DT_BLOCK，offset无意义，size=0（不改变原符号表offset），attr指向其独立符号表。
函数name=函数名，type=IDENTIFIER，datatype=DT_BLOCK，offset为其首指令label，size=0，attr信息包含其参数个数及独立符号表。函数返回值符号位于函数符号表首项，作为匿名标识符处理。函数参数依定义序位于符号表第1项及其后。

指令属性：
index：该指令在指令池中的下标。该属性无需赋值自动获得。
label：该指令前是否有标号（label），若-1则为无，否则为标号在标号表中的下标。

符号引用：（用于指令等需引用具体符号的场合）
table：引用符号所在的符号表。若该引用表示标号，则table=NULL。
index：引用符号在符号表中的下标。若该引用表示标号，则index=标号。

标号表：
仅有一个匿名属性，在语义分析进行中表示对应指令在指令表中的下标；在语义分析结束指令重排序后，表示对应指令重排序后的下标。

分析栈符号属性：
code：该符号的起始指令下标
end：该符号的末尾指令下标
label：等效于“insts[符号.code].label”
nextlist：若该符号的next被求出，应该将next的label填入哪些指令（下标表示）的跳转目标处。但对于SELECT_MID，其nextlist的含义为执行完STATEMENT1后应跳转至何处（即选择语句外）
type：该符号的语义类型。类型表可参照非终结符表，但常数和表达式被分为整型、浮点型（使用attr属性加以区分）
attr：各类符号自身独有的详细信息。

表达式符号属性：
truelist：
falselist：
isTemp：指示该表达式的值是否是以临时符号的形式存在于符号表中
ref：表达式值符号在符号表中的引用。对于布尔表达式，其通常情况下不会产生临时值，但依然要为之在符号表中开辟临时符号空间，以统一各种表达式的操作。在需要对布尔表达式求值时，可能需要将其值写入其对应的临时符号中。
一切布尔型表达式均自带跳转指令。


工具函数：
newlabel(i)：返回新标号，并在标号表中填入“该标号指向指令池中下标为i的指令”
newtemp()：从临时符号池中申请一个临时符号下标并返回。临时符号池初始为空，每当申请超出池大小时便从符号表中申请新符号空间
freetemp()：释放上一个申请的临时符号，让其返回符号池
backpatch(l, a)：使用标号a填写列表l指定的若干goto指令的跳转地址参数（即result参数）
merge(l1, l2)：合并两个列表
gen(op, arg1, arg2, result)：在指令池中申请一个指令空间并填入指定的四元式，最后返回新指令的下标
newsymbol(name, type, attr)：在当前符号表中创建新符号，返回新符号下标
newtable()：在当前符号表中创建新符号表，并进入之。
quittable()：退出当前符号表，返回上一级符号表。
