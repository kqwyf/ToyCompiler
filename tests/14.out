Token sequence:
int             < INT         ,        >
main            < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
!               < NOT         ,        >
b               < IDENTIFIER  , 3      >
&&              < AND         ,        >
c               < IDENTIFIER  , 4      >
>=              < GREATEREQUAL,        >
d               < IDENTIFIER  , 5      >
+               < PLUS        ,        >
e               < IDENTIFIER  , 6      >
.               < DOT         ,        >
f               < IDENTIFIER  , 7      >
[               < LEFTBRACKET ,        >
g               < IDENTIFIER  , 8      >
]               < RIGHTBRACKET,        >
&&              < AND         ,        >
-               < MINUS       ,        >
h               < IDENTIFIER  , 9      >
+               < PLUS        ,        >
3               < CONSTANT    , 10     >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
}               < RIGHTBRACE  ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     main
2     a
3     b
4     c
5     d
6     e
7     f
8     g
9     h
10    3

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_MID -> ) {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION2 -> ! EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION3 -> EXPRESSION3 . identifier
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION3 -> EXPRESSION3 [ EXPRESSION ]
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 + EXPRESSION4
EXPRESSION6 -> EXPRESSION6 >= EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION2 -> - EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 + EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENT -> { }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
PROGRAM -> DECLARE_S
