Token sequence:
int             < INT         ,        >
parse           < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
int             < INT         ,        >
a               < IDENTIFIER  , 2      >
,               < COMMA       ,        >
int             < INT         ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
print           < IDENTIFIER  , 4      >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
print           < IDENTIFIER  , 4      >
(               < LEFTPAREN   ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
int             < INT         ,        >
main            < IDENTIFIER  , 5      >
(               < LEFTPAREN   ,        >
int             < INT         ,        >
argc            < IDENTIFIER  , 6      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
parse           < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
argc            < IDENTIFIER  , 6      >
,               < COMMA       ,        >
argc            < IDENTIFIER  , 6      >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     parse
2     a
3     b
4     print
5     main
6     argc

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
PARAMETERS -> TYPE identifier
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
PARAMETERS -> PARAMETERS , TYPE identifier
DECLARE_FUNC_SIGN -> DECLARE_FUNC_BEGIN PARAMETERS ) {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_SIGN STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
PARAMETERS -> TYPE identifier
DECLARE_FUNC_SIGN -> DECLARE_FUNC_BEGIN PARAMETERS ) {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION_S , EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_SIGN STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE_S DECLARE
PROGRAM -> DECLARE_S
