Token sequence:
int             < INT         ,        >
main            < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
(               < LEFTPAREN   ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
while           < WHILE       ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
)               < RIGHTPAREN  ,        >
while           < WHILE       ,        >
(               < LEFTPAREN   ,        >
1.3             < CONSTANT    , 4      >
)               < RIGHTPAREN  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
-               < MINUS       ,        >
(               < LEFTPAREN   ,        >
6               < CONSTANT    , 5      >
*               < MULTIPLY    ,        >
b               < IDENTIFIER  , 3      >
+               < PLUS        ,        >
a               < IDENTIFIER  , 2      >
[               < LEFTBRACKET ,        >
3               < CONSTANT    , 6      >
]               < RIGHTBRACKET,        >
-               < MINUS       ,        >
5               < CONSTANT    , 7      >
/               < DIVIDE      ,        >
2.0             < CONSTANT    , 8      >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
while           < WHILE       ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
>=              < GREATEREQUAL,        >
b               < IDENTIFIER  , 3      >
&&              < AND         ,        >
!               < NOT         ,        >
(               < LEFTPAREN   ,        >
b               < IDENTIFIER  , 3      >
<=              < LESSEQUAL   ,        >
c               < IDENTIFIER  , 9      >
)               < RIGHTPAREN  ,        >
||              < OR          ,        >
c               < IDENTIFIER  , 9      >
==              < EQUAL       ,        >
d               < IDENTIFIER  , 10     >
&&              < AND         ,        >
d               < IDENTIFIER  , 10     >
<               < LESS        ,        >
e               < IDENTIFIER  , 11     >
||              < OR          ,        >
e               < IDENTIFIER  , 11     >
>               < GREATER     ,        >
f               < IDENTIFIER  , 12     >
||              < OR          ,        >
f               < IDENTIFIER  , 12     >
!=              < NOTEQUAL    ,        >
g               < IDENTIFIER  , 13     >
)               < RIGHTPAREN  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
.               < DOT         ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
c               < IDENTIFIER  , 9      >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
,               < COMMA       ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     main
2     a
3     b
4     1.300000
5     6
6     3
7     5
8     2.000000
9     c
10    d
11    e
12    f
13    g

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_MID -> ) {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION1 -> identifier ( )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
LOOP_BEGIN -> while ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
LOOP_BEGIN -> while ( EXPRESSION )
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 * EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION3 -> EXPRESSION3 [ EXPRESSION ]
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 + EXPRESSION4
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 / EXPRESSION3
EXPRESSION5 -> EXPRESSION5 - EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION2 -> - EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 >= EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 <= EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION2 -> ! EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION7 || EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 < EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 > EXPRESSION5
EXPRESSION7 -> EXPRESSION7 || EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 != EXPRESSION5
EXPRESSION7 -> EXPRESSION7 || EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
LOOP_BEGIN -> while ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION3 -> EXPRESSION3 . identifier
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION_S , EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION8 = EXPRESSION7
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
LOOP -> LOOP_BEGIN STATEMENT
STATEMENT -> LOOP
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
LOOP -> LOOP_BEGIN STATEMENT
STATEMENT -> LOOP
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
LOOP -> LOOP_BEGIN STATEMENT
STATEMENT -> LOOP
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
PROGRAM -> DECLARE_S
