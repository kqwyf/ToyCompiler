Token sequence:
int             < INT         ,        >
main            < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
bool            < BOOL        ,        >
a               < IDENTIFIER  , 2      >
,               < COMMA       ,        >
b               < IDENTIFIER  , 3      >
;               < SEMICOLON   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
;               < SEMICOLON   ,        >
b               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
;               < SEMICOLON   ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
&&              < AND         ,        >
(               < LEFTPAREN   ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
b               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
0               < CONSTANT    , 5      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
==              < EQUAL       ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
||              < OR          ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
0               < CONSTANT    , 5      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
(               < LEFTPAREN   ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
)               < RIGHTPAREN  ,        >
&&              < AND         ,        >
(               < LEFTPAREN   ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
0               < CONSTANT    , 5      >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
||              < OR          ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
b               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
0               < CONSTANT    , 5      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
!               < NOT         ,        >
a               < IDENTIFIER  , 2      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
b               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
1               < CONSTANT    , 4      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
!               < NOT         ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
!=              < NOTEQUAL    ,        >
b               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
1               < CONSTANT    , 4      >
==              < EQUAL       ,        >
0               < CONSTANT    , 5      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     main
2     a
3     b
4     1
5     0

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_SIGN -> DECLARE_FUNC_BEGIN ) {
TYPE_BASIC -> bool
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 || EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 && EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION7 || EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION2 -> ! EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 != EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION2 -> ( EXPRESSION )
EXPRESSION2 -> ! EXPRESSION2
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 == EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_SIGN STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
PROGRAM -> DECLARE_S

Semantic Symbol Tables:

Global Symbol Table (Table 0):
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | 1            | 0        | 
    1 | INT          | 0            | 4        | 
    2 | BLOCK        | main         | .L0      | Table 1, Params#: 0

Table 1:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | (anonymous)  | 0        | 
    1 | BOOL         | a            | 4        | 
    2 | BOOL         | b            | 5        | 
    3 | BLOCK        | (anonymous)  |          | Table 2
    4 | BLOCK        | (anonymous)  |          | Table 4
    5 | BLOCK        | (anonymous)  |          | Table 6
    6 | BLOCK        | (anonymous)  |          | Table 8
    7 | BLOCK        | (anonymous)  |          | Table 10
    8 | BLOCK        | (anonymous)  |          | Table 12

Table 2:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 3

Table 3:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 4:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 5

Table 5:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 6:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 7

Table 7:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 8:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 9

Table 9:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 10:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 11

Table 11:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 12:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 13

Table 13:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------


Instruction sequence:
.L0    (  JE,   0:0  ,   0:0  , .L2    )
       ( JMP,        ,        , .L3    )
.L2    ( TRU,        ,        ,   1:3  )
       ( JMP,        ,        , .L1    )
.L3    ( FAL,        ,        ,   1:3  )
.L1    ( MOV,   1:1  ,   1:3  ,        )
       ( JNZ,   1:1  ,        , .L7    )
       ( JMP,        ,        , .L7    )
.L7    (  JE,   0:0  ,   0:0  , .L5    )
       ( JMP,        ,        , .L6    )
.L5    ( TRU,        ,        ,   1:3  )
       ( JMP,        ,        , .L4    )
.L6    ( FAL,        ,        ,   1:3  )
.L4    ( MOV,   1:2  ,   1:3  ,        )
       ( JNZ,   1:2  ,        , .L13   )
       ( JMP,        ,        , .L13   )
.L13   ( JNZ,   1:1  ,        , .L8    )
       ( JMP,        ,        , .L19   )
.L8    (  JE,   0:0  ,   0:0  , .L12   )
       ( JMP,        ,        , .L19   )
.L12   (  JE,   0:0  ,   0:1  , .L10   )
       ( JMP,        ,        , .L11   )
.L10   ( TRU,        ,        ,   3:0  )
       ( JMP,        ,        , .L9    )
.L11   ( FAL,        ,        ,   3:0  )
.L9    ( MOV,   1:2  ,   3:0  ,        )
       ( JNZ,   1:2  ,        , .L19   )
       ( JMP,        ,        , .L19   )
.L19   (  JE,   1:1  ,   1:2  , .L18   )
       ( JMP,        ,        , .L14   )
.L14   ( JNZ,   1:2  ,        , .L18   )
       ( JMP,        ,        , .L25   )
.L18   (  JE,   0:0  ,   0:1  , .L16   )
       ( JMP,        ,        , .L17   )
.L16   ( TRU,        ,        ,   5:0  )
       ( JMP,        ,        , .L15   )
.L17   ( FAL,        ,        ,   5:0  )
.L15   ( MOV,   1:1  ,   5:0  ,        )
       ( JNZ,   1:1  ,        , .L25   )
       ( JMP,        ,        , .L25   )
.L25   (  JE,   0:0  ,   0:0  , .L20   )
       ( JMP,        ,        , .L31   )
.L20   (  JE,   0:0  ,   0:1  , .L24   )
       ( JMP,        ,        , .L31   )
.L24   (  JE,   0:0  ,   0:0  , .L22   )
       ( JMP,        ,        , .L23   )
.L22   ( TRU,        ,        ,   7:0  )
       ( JMP,        ,        , .L21   )
.L23   ( FAL,        ,        ,   7:0  )
.L21   ( MOV,   1:1  ,   7:0  ,        )
       ( JNZ,   1:1  ,        , .L31   )
       ( JMP,        ,        , .L31   )
.L31   ( JNZ,   1:1  ,        , .L30   )
       ( JMP,        ,        , .L26   )
.L26   ( JNZ,   1:2  ,        , .L30   )
       ( JMP,        ,        , .L36   )
.L30   (  JE,   0:0  ,   0:1  , .L28   )
       ( JMP,        ,        , .L29   )
.L28   ( TRU,        ,        ,   9:0  )
       ( JMP,        ,        , .L27   )
.L29   ( FAL,        ,        ,   9:0  )
.L27   ( MOV,   1:2  ,   9:0  ,        )
       ( JNZ,   1:2  ,        , .L36   )
       ( JMP,        ,        , .L36   )
.L36   ( JNZ,   1:1  ,        , .L41   )
       ( JMP,        ,        , .L35   )
.L35   (  JE,   0:0  ,   0:0  , .L33   )
       ( JMP,        ,        , .L34   )
.L33   ( TRU,        ,        ,  11:0  )
       ( JMP,        ,        , .L32   )
.L34   ( FAL,        ,        ,  11:0  )
.L32   ( MOV,   1:2  ,  11:0  ,        )
       ( JNZ,   1:2  ,        , .L41   )
       ( JMP,        ,        , .L41   )
.L41   ( JNE,   1:1  ,   1:2  , .L42   )
       ( JMP,        ,        , .L40   )
.L40   (  JE,   0:0  ,   0:1  , .L38   )
       ( JMP,        ,        , .L39   )
.L38   ( TRU,        ,        ,  13:0  )
       ( JMP,        ,        , .L37   )
.L39   ( FAL,        ,        ,  13:0  )
.L37   ( MOV,   1:1  ,  13:0  ,        )
       ( JNZ,   1:1  ,        , .L42   )
       ( JMP,        ,        , .L42   )
.L42   ( RET,        ,        ,        )
