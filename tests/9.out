Token sequence:
int             < INT         ,        >
a               < IDENTIFIER  , 1      >
,               < COMMA       ,        >
b               < IDENTIFIER  , 2      >
;               < SEMICOLON   ,        >
float           < FLOAT       ,        >
c               < IDENTIFIER  , 3      >
,               < COMMA       ,        >
d               < IDENTIFIER  , 4      >
,               < COMMA       ,        >
e               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
bool            < BOOL        ,        >
f               < IDENTIFIER  , 6      >
;               < SEMICOLON   ,        >
struct          < STRUCT      ,        >
person          < IDENTIFIER  , 7      >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
age             < IDENTIFIER  , 8      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
;               < SEMICOLON   ,        >
struct          < STRUCT      ,        >
string          < IDENTIFIER  , 9      >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
[               < LEFTBRACKET ,        >
101             < CONSTANT    , 10     >
]               < RIGHTBRACKET,        >
s               < IDENTIFIER  , 11     >
;               < SEMICOLON   ,        >
int             < INT         ,        >
len             < IDENTIFIER  , 12     >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
;               < SEMICOLON   ,        >
struct          < STRUCT      ,        >
matrix50        < IDENTIFIER  , 13     >
{               < LEFTBRACE   ,        >
float           < FLOAT       ,        >
[               < LEFTBRACKET ,        >
50              < CONSTANT    , 14     >
]               < RIGHTBRACKET,        >
[               < LEFTBRACKET ,        >
50              < CONSTANT    , 14     >
]               < RIGHTBRACKET,        >
data            < IDENTIFIER  , 15     >
;               < SEMICOLON   ,        >
int             < INT         ,        >
w               < IDENTIFIER  , 16     >
,               < COMMA       ,        >
h               < IDENTIFIER  , 17     >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
;               < SEMICOLON   ,        >

Symbol table:
1     a
2     b
3     c
4     d
5     e
6     f
7     person
8     age
9     string
10    101
11    s
12    len
13    matrix50
14    50
15    data
16    w
17    h

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE -> DECLARE_VAR
DECLARE_S -> DECLARE
TYPE_BASIC -> float
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE -> DECLARE_VAR
DECLARE_S -> DECLARE_S DECLARE
TYPE_BASIC -> bool
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE -> DECLARE_VAR
DECLARE_S -> DECLARE_S DECLARE
TYPE_STRUCT -> struct identifier
DECLARE_STRUCT_BEGIN -> TYPE_STRUCT {
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE_VAR_S -> DECLARE_VAR
DECLARE_STRUCT -> DECLARE_STRUCT_BEGIN DECLARE_VAR_S } ;
DECLARE -> DECLARE_STRUCT
DECLARE_S -> DECLARE_S DECLARE
TYPE_STRUCT -> struct identifier
DECLARE_STRUCT_BEGIN -> TYPE_STRUCT {
TYPE_BASIC -> int
TYPE_ARRAY -> TYPE_BASIC [ constant ]
TYPE -> TYPE_ARRAY
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE_VAR_S -> DECLARE_VAR
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE_VAR_S -> DECLARE_VAR_S DECLARE_VAR
DECLARE_STRUCT -> DECLARE_STRUCT_BEGIN DECLARE_VAR_S } ;
DECLARE -> DECLARE_STRUCT
DECLARE_S -> DECLARE_S DECLARE
TYPE_STRUCT -> struct identifier
DECLARE_STRUCT_BEGIN -> TYPE_STRUCT {
TYPE_BASIC -> float
TYPE_ARRAY -> TYPE_BASIC [ constant ]
TYPE_ARRAY -> TYPE_ARRAY [ constant ]
TYPE -> TYPE_ARRAY
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE_VAR_S -> DECLARE_VAR
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
DECLARE_VAR_S -> DECLARE_VAR_S DECLARE_VAR
DECLARE_STRUCT -> DECLARE_STRUCT_BEGIN DECLARE_VAR_S } ;
DECLARE -> DECLARE_STRUCT
DECLARE_S -> DECLARE_S DECLARE
PROGRAM -> DECLARE_S
