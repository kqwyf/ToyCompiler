Token sequence:
int             < INT         ,        >
input           < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
}               < RIGHTBRACE  ,        >
int             < INT         ,        >
print           < IDENTIFIER  , 2      >
(               < LEFTPAREN   ,        >
int             < INT         ,        >
a               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
}               < RIGHTBRACE  ,        >
int             < INT         ,        >
main            < IDENTIFIER  , 4      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
a               < IDENTIFIER  , 3      >
,               < COMMA       ,        >
b               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
a               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
input           < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
b               < IDENTIFIER  , 5      >
=               < ASSIGN      ,        >
input           < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
/* ... */       < COMMENT     ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 3      >
<               < LESS        ,        >
b               < IDENTIFIER  , 5      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
c               < IDENTIFIER  , 6      >
;               < SEMICOLON   ,        >
c               < IDENTIFIER  , 6      >
=               < ASSIGN      ,        >
a               < IDENTIFIER  , 3      >
;               < SEMICOLON   ,        >
a               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
b               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
b               < IDENTIFIER  , 5      >
=               < ASSIGN      ,        >
c               < IDENTIFIER  , 6      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
/* ... */       < COMMENT     ,        >
while           < WHILE       ,        >
(               < LEFTPAREN   ,        >
b               < IDENTIFIER  , 5      >
>               < GREATER     ,        >
0               < CONSTANT    , 7      >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
r               < IDENTIFIER  , 8      >
;               < SEMICOLON   ,        >
r               < IDENTIFIER  , 8      >
=               < ASSIGN      ,        >
a               < IDENTIFIER  , 3      >
-               < MINUS       ,        >
a               < IDENTIFIER  , 3      >
/               < DIVIDE      ,        >
b               < IDENTIFIER  , 5      >
*               < MULTIPLY    ,        >
b               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
a               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
b               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
b               < IDENTIFIER  , 5      >
=               < ASSIGN      ,        >
r               < IDENTIFIER  , 8      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >
print           < IDENTIFIER  , 2      >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 3      >
)               < RIGHTPAREN  ,        >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     input
2     print
3     a
4     main
5     b
6     c
7     0
8     r

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_MID -> ) {
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
PARAMETERS -> TYPE identifier
DECLARE_FUNC_MID -> PARAMETERS ) {
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE_S DECLARE
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_MID -> ) {
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION1 -> identifier ( )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION1 -> identifier ( )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 < EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
STATEMENTS_BEGIN -> {
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> constant
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 > EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
LOOP_BEGIN -> while ( EXPRESSION )
STATEMENTS_BEGIN -> {
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 / EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 * EXPRESSION3
EXPRESSION5 -> EXPRESSION5 - EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
STATEMENT -> STATEMENTS_BEGIN STATEMENT_S }
LOOP -> LOOP_BEGIN STATEMENT
STATEMENT -> LOOP
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
EXPRESSION_S -> EXPRESSION
EXPRESSION1 -> identifier ( EXPRESSION_S )
EXPRESSION2 -> EXPRESSION1
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE_S DECLARE
PROGRAM -> DECLARE_S

Semantic Symbol Tables:

Global Symbol Table (Table 0):
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | 0            | 0        | 
    1 | BLOCK        | input        | .L0      | Table 1, Params#: 0
    2 | BLOCK        | print        | .L1      | Table 2, Params#: 1
    3 | BLOCK        | main         | .L6      | Table 3, Params#: 0

Table 1:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | (anonymous)  | 0        | 

Table 2:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | (anonymous)  | 0        | 
    1 | INT          | a            | 4        | 

Table 3:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | (anonymous)  | 0        | 
    1 | INT          | a            | 4        | 
    2 | INT          | b            | 8        | 
    3 | BLOCK        | (anonymous)  |          | Table 4
    4 | BLOCK        | (anonymous)  |          | Table 6

Table 4:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 5

Table 5:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | c            | 0        | 

Table 6:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | (anonymous)  |          | Table 7

Table 7:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | r            | 0        | 


Instruction sequence:
.L0    ( RET,        ,        ,        )
.L1    ( RET,        ,        ,        )
.L6    (CALL,   3:3  ,        , .L0    )
       ( MOV,   3:1  ,   3:3  ,        )
       (CALL,   3:3  ,        , .L0    )
       ( MOV,   3:2  ,   3:3  ,        )
       (  JL,   3:1  ,   3:2  , .L2    )
       ( JMP,        ,        , .L3    )
.L2    ( MOV,   5:0  ,   3:1  ,        )
       ( MOV,   3:1  ,   3:2  ,        )
       ( MOV,   3:2  ,   5:0  ,        )
.L3    (  JG,   3:2  ,   0:0  , .L4    )
       ( JMP,        ,        , .L5    )
.L4    ( DIV,   3:1  ,   3:2  ,   7:1  )
       ( MUL,   7:1  ,   3:2  ,   7:1  )
       ( SUB,   3:1  ,   7:1  ,   7:1  )
       ( MOV,   7:0  ,   7:1  ,        )
       ( MOV,   3:1  ,   3:2  ,        )
       ( MOV,   3:2  ,   7:0  ,        )
       ( JMP,        ,        , .L3    )
.L5    ( PAR,        ,        ,   3:1  )
       (CALL,   3:5  ,        , .L1    )
       ( RET,        ,        ,        )
