Token sequence:
int             < INT         ,        >
main            < IDENTIFIER  , 1      >
(               < LEFTPAREN   ,        >
)               < RIGHTPAREN  ,        >
{               < LEFTBRACE   ,        >
int             < INT         ,        >
a               < IDENTIFIER  , 2      >
,               < COMMA       ,        >
b               < IDENTIFIER  , 3      >
;               < SEMICOLON   ,        >
float           < FLOAT       ,        >
c               < IDENTIFIER  , 4      >
,               < COMMA       ,        >
d               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
a               < IDENTIFIER  , 2      >
=               < ASSIGN      ,        >
b               < IDENTIFIER  , 3      >
+               < PLUS        ,        >
c               < IDENTIFIER  , 4      >
;               < SEMICOLON   ,        >
b               < IDENTIFIER  , 3      >
=               < ASSIGN      ,        >
a               < IDENTIFIER  , 2      >
-               < MINUS       ,        >
d               < IDENTIFIER  , 5      >
;               < SEMICOLON   ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
a               < IDENTIFIER  , 2      >
+               < PLUS        ,        >
b               < IDENTIFIER  , 3      >
>               < GREATER     ,        >
c               < IDENTIFIER  , 4      >
)               < RIGHTPAREN  ,        >
c               < IDENTIFIER  , 4      >
=               < ASSIGN      ,        >
b               < IDENTIFIER  , 3      >
*               < MULTIPLY    ,        >
c               < IDENTIFIER  , 4      >
;               < SEMICOLON   ,        >
if              < IF          ,        >
(               < LEFTPAREN   ,        >
c               < IDENTIFIER  , 4      >
*               < MULTIPLY    ,        >
d               < IDENTIFIER  , 5      >
<               < LESS        ,        >
a               < IDENTIFIER  , 2      >
)               < RIGHTPAREN  ,        >
d               < IDENTIFIER  , 5      >
=               < ASSIGN      ,        >
d               < IDENTIFIER  , 5      >
/               < DIVIDE      ,        >
a               < IDENTIFIER  , 2      >
;               < SEMICOLON   ,        >
}               < RIGHTBRACE  ,        >

Symbol table:
1     main
2     a
3     b
4     c
5     d

Production sequence:
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
DECLARE_FUNC_BEGIN -> TYPE identifier (
DECLARE_FUNC_MID -> ) {
TYPE_BASIC -> int
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT
TYPE_BASIC -> float
TYPE -> TYPE_BASIC
IDENTIFIER_S -> identifier
IDENTIFIER_S -> IDENTIFIER_S , identifier
DECLARE_VAR -> TYPE IDENTIFIER_S ;
STATEMENT -> DECLARE_VAR
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 + EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 - EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION5 + EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 > EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 * EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 * EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION6 < EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION -> EXPRESSION8
SELECT_BEGIN -> if ( EXPRESSION )
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION3
EXPRESSION2 -> identifier
EXPRESSION3 -> EXPRESSION2
EXPRESSION4 -> EXPRESSION4 / EXPRESSION3
EXPRESSION5 -> EXPRESSION4
EXPRESSION6 -> EXPRESSION5
EXPRESSION7 -> EXPRESSION6
EXPRESSION8 -> EXPRESSION7
EXPRESSION8 -> EXPRESSION7 = EXPRESSION8
EXPRESSION -> EXPRESSION8
STATEMENT -> EXPRESSION ;
SELECT -> SELECT_BEGIN STATEMENT
STATEMENT -> SELECT
STATEMENT_S -> STATEMENT_S STATEMENT
DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID STATEMENT_S }
DECLARE -> DECLARE_FUNC
DECLARE_S -> DECLARE
PROGRAM -> DECLARE_S

Semantic Symbol Tables:

Global Symbol Table (Table 0):
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | BLOCK        | main         | .L4      | Table 1, Params#: 0

Table 1:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------
    0 | INT          | (anonymous)  | 0        | 
    1 | INT          | a            | 4        | 
    2 | INT          | b            | 8        | 
    3 | FLOAT        | c            | 12       | 
    4 | FLOAT        | d            | 20       | 
    5 | BLOCK        | (anonymous)  |          | Table 2
    6 | BLOCK        | (anonymous)  |          | Table 3

Table 2:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------

Table 3:
  #   |   DataType   |     Name     |  Offset  |    Attr
------+--------------+--------------+----------+------------


Instruction sequence:
.L4    ( ADD,   1:2  ,   1:3  ,   1:5  )
       ( MOV,   1:1  ,   1:5  ,        )
       ( SUB,   1:1  ,   1:4  ,   1:5  )
       ( MOV,   1:2  ,   1:5  ,        )
       ( ADD,   1:1  ,   1:2  ,   1:5  )
       (  JG,   1:5  ,   1:3  , .L0    )
       ( JMP,        ,        , .L2    )
.L0    ( MUL,   1:2  ,   1:3  ,   2:0  )
       ( MOV,   1:3  ,   2:0  ,        )
.L2    ( MUL,   1:3  ,   1:4  ,   1:6  )
       (  JL,   1:6  ,   1:1  , .L1    )
       ( JMP,        ,        , .L3    )
.L1    ( DIV,   1:4  ,   1:1  ,   3:0  )
       ( MOV,   1:4  ,   3:0  ,        )
.L3    ( RET,        ,        ,        )
