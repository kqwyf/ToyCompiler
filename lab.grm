# identifier int float bool struct if else do while + - * / < > <= >= == != && || ! . = ( ) [ ] , ; { } constant comment PROGRAM DECLARE_S STATEMENT_S STATEMENT DECLARE SELECT LOOP EXPRESSION STATEMENTS_BEGIN DECLARE_VAR DECLARE_STRUCT DECLARE_FUNC DECLARE_VAR_S TYPE IDENTIFIER_S DECLARE_STRUCT_BEGIN TYPE_STRUCT DECLARE_FUNC_BEGIN DECLARE_FUNC_MID PARAMETERS TYPE_BASIC TYPE_ARRAY SELECT_BEGIN SELECT_MID LOOP_BEGIN OPERATOR_REL EXPRESSION_S EXPRESSION1 EXPRESSION2 EXPRESSION3 EXPRESSION4 EXPRESSION5 EXPRESSION6 EXPRESSION7 EXPRESSION8
PROGRAM -> DECLARE_S
         |

STATEMENT_S -> STATEMENT_S STATEMENT
             | STATEMENT
    STATEMENT -> DECLARE_VAR
               | DECLARE_STRUCT
               | SELECT
               | LOOP
               | EXPRESSION ;
               | STATEMENTS_BEGIN STATEMENT_S }
               | { }
    STATEMENTS_BEGIN -> {

DECLARE_S -> DECLARE_S DECLARE
           | DECLARE
    DECLARE -> DECLARE_VAR
             | DECLARE_STRUCT
             | DECLARE_FUNC
        DECLARE_VAR -> TYPE IDENTIFIER_S ;
        DECLARE_VAR_S -> DECLARE_VAR_S DECLARE_VAR
                       | DECLARE_VAR

        DECLARE_STRUCT -> DECLARE_STRUCT_BEGIN DECLARE_VAR_S } ;
        DECLARE_STRUCT_BEGIN -> TYPE_STRUCT {

        DECLARE_FUNC -> DECLARE_FUNC_BEGIN DECLARE_FUNC_MID STATEMENT_S }
                      | DECLARE_FUNC_BEGIN DECLARE_FUNC_MID }
        DECLARE_FUNC_BEGIN -> TYPE identifier (
        DECLARE_FUNC_MID -> PARAMETERS ) {
                          | ) {
            PARAMETERS -> PARAMETERS , TYPE identifier
                        | TYPE identifier
TYPE -> TYPE_BASIC
      | TYPE_ARRAY
      | TYPE_STRUCT
    TYPE_BASIC -> int
                | float
                | bool
    TYPE_ARRAY -> TYPE_ARRAY [ constant ]
                | TYPE_BASIC [ constant ]
    TYPE_STRUCT -> struct identifier

SELECT -> SELECT_BEGIN STATEMENT
        | SELECT_BEGIN STATEMENT SELECT_MID STATEMENT
    SELECT_BEGIN -> if ( EXPRESSION )
    SELECT_MID -> else

LOOP -> LOOP_BEGIN STATEMENT
    LOOP_BEGIN -> while ( EXPRESSION )

EXPRESSION_S -> EXPRESSION_S , EXPRESSION
              | EXPRESSION
    EXPRESSION1 -> identifier ( EXPRESSION_S )
                 | identifier ( )
    EXPRESSION2 -> EXPRESSION1
                 | identifier
                 | constant
                 | ( EXPRESSION )
                 | ! EXPRESSION2
                 | - EXPRESSION2
    EXPRESSION3 -> EXPRESSION2
                 | EXPRESSION3 . identifier
                 | EXPRESSION3 [ EXPRESSION ]
    EXPRESSION4 -> EXPRESSION3
                 | EXPRESSION4 * EXPRESSION3
                 | EXPRESSION4 / EXPRESSION3
    EXPRESSION5 -> EXPRESSION4
                 | EXPRESSION5 + EXPRESSION4
                 | EXPRESSION5 - EXPRESSION4
    EXPRESSION6 -> EXPRESSION5
                 | EXPRESSION6 == EXPRESSION5
                 | EXPRESSION6 != EXPRESSION5
                 | EXPRESSION6 > EXPRESSION5
                 | EXPRESSION6 >= EXPRESSION5
                 | EXPRESSION6 < EXPRESSION5
                 | EXPRESSION6 <= EXPRESSION5
    EXPRESSION7 -> EXPRESSION6
                 | EXPRESSION7 && EXPRESSION6
                 | EXPRESSION7 || EXPRESSION6
    EXPRESSION8 -> EXPRESSION7
                 | EXPRESSION8 = EXPRESSION7
    EXPRESSION -> EXPRESSION8

IDENTIFIER_S -> IDENTIFIER_S , identifier
              | identifier

